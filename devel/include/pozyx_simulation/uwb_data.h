// Generated by gencpp from file pozyx_simulation/uwb_data.msg
// DO NOT EDIT!


#ifndef POZYX_SIMULATION_MESSAGE_UWB_DATA_H
#define POZYX_SIMULATION_MESSAGE_UWB_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pozyx_simulation
{
template <class ContainerAllocator>
struct uwb_data_
{
  typedef uwb_data_<ContainerAllocator> Type;

  uwb_data_()
    : destination_id()
    , distance()
    , stamp()  {
    }
  uwb_data_(const ContainerAllocator& _alloc)
    : destination_id(_alloc)
    , distance(_alloc)
    , stamp(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _destination_id_type;
  _destination_id_type destination_id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _distance_type;
  _distance_type distance;

   typedef std::vector<ros::Time, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<ros::Time>> _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::pozyx_simulation::uwb_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pozyx_simulation::uwb_data_<ContainerAllocator> const> ConstPtr;

}; // struct uwb_data_

typedef ::pozyx_simulation::uwb_data_<std::allocator<void> > uwb_data;

typedef boost::shared_ptr< ::pozyx_simulation::uwb_data > uwb_dataPtr;
typedef boost::shared_ptr< ::pozyx_simulation::uwb_data const> uwb_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pozyx_simulation::uwb_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pozyx_simulation::uwb_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pozyx_simulation::uwb_data_<ContainerAllocator1> & lhs, const ::pozyx_simulation::uwb_data_<ContainerAllocator2> & rhs)
{
  return lhs.destination_id == rhs.destination_id &&
    lhs.distance == rhs.distance &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pozyx_simulation::uwb_data_<ContainerAllocator1> & lhs, const ::pozyx_simulation::uwb_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pozyx_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pozyx_simulation::uwb_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pozyx_simulation::uwb_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pozyx_simulation::uwb_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pozyx_simulation::uwb_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pozyx_simulation::uwb_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pozyx_simulation::uwb_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pozyx_simulation::uwb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "853a584c8bd9fd74a6b2709e39029b14";
  }

  static const char* value(const ::pozyx_simulation::uwb_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x853a584c8bd9fd74ULL;
  static const uint64_t static_value2 = 0xa6b2709e39029b14ULL;
};

template<class ContainerAllocator>
struct DataType< ::pozyx_simulation::uwb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pozyx_simulation/uwb_data";
  }

  static const char* value(const ::pozyx_simulation::uwb_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pozyx_simulation::uwb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[] destination_id\n"
"float64[] distance\n"
"time[] stamp\n"
;
  }

  static const char* value(const ::pozyx_simulation::uwb_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pozyx_simulation::uwb_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.destination_id);
      stream.next(m.distance);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uwb_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pozyx_simulation::uwb_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pozyx_simulation::uwb_data_<ContainerAllocator>& v)
  {
    s << indent << "destination_id[]" << std::endl;
    for (size_t i = 0; i < v.destination_id.size(); ++i)
    {
      s << indent << "  destination_id[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.destination_id[i]);
    }
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.distance[i]);
    }
    s << indent << "stamp[]" << std::endl;
    for (size_t i = 0; i < v.stamp.size(); ++i)
    {
      s << indent << "  stamp[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.stamp[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POZYX_SIMULATION_MESSAGE_UWB_DATA_H
