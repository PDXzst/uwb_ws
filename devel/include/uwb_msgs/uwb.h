// Generated by gencpp from file uwb_msgs/uwb.msg
// DO NOT EDIT!


#ifndef UWB_MSGS_MESSAGE_UWB_H
#define UWB_MSGS_MESSAGE_UWB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nlink_parser/LinktrackNodeframe2.h>

namespace uwb_msgs
{
template <class ContainerAllocator>
struct uwb_
{
  typedef uwb_<ContainerAllocator> Type;

  uwb_()
    : header()
    , uwb()
    , role(0)
    , id(0)
    , dis(0.0)
    , fp_rssi(0.0)
    , rx_rssi(0.0)
    , dis_avg(0.0)
    , fp_avg(0.0)
    , rx_avg(0.0)  {
    }
  uwb_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uwb(_alloc)
    , role(0)
    , id(0)
    , dis(0.0)
    , fp_rssi(0.0)
    , rx_rssi(0.0)
    , dis_avg(0.0)
    , fp_avg(0.0)
    , rx_avg(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::nlink_parser::LinktrackNodeframe2_<ContainerAllocator>  _uwb_type;
  _uwb_type uwb;

   typedef uint8_t _role_type;
  _role_type role;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _dis_type;
  _dis_type dis;

   typedef float _fp_rssi_type;
  _fp_rssi_type fp_rssi;

   typedef float _rx_rssi_type;
  _rx_rssi_type rx_rssi;

   typedef float _dis_avg_type;
  _dis_avg_type dis_avg;

   typedef float _fp_avg_type;
  _fp_avg_type fp_avg;

   typedef float _rx_avg_type;
  _rx_avg_type rx_avg;





  typedef boost::shared_ptr< ::uwb_msgs::uwb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uwb_msgs::uwb_<ContainerAllocator> const> ConstPtr;

}; // struct uwb_

typedef ::uwb_msgs::uwb_<std::allocator<void> > uwb;

typedef boost::shared_ptr< ::uwb_msgs::uwb > uwbPtr;
typedef boost::shared_ptr< ::uwb_msgs::uwb const> uwbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uwb_msgs::uwb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uwb_msgs::uwb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uwb_msgs::uwb_<ContainerAllocator1> & lhs, const ::uwb_msgs::uwb_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.uwb == rhs.uwb &&
    lhs.role == rhs.role &&
    lhs.id == rhs.id &&
    lhs.dis == rhs.dis &&
    lhs.fp_rssi == rhs.fp_rssi &&
    lhs.rx_rssi == rhs.rx_rssi &&
    lhs.dis_avg == rhs.dis_avg &&
    lhs.fp_avg == rhs.fp_avg &&
    lhs.rx_avg == rhs.rx_avg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uwb_msgs::uwb_<ContainerAllocator1> & lhs, const ::uwb_msgs::uwb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uwb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uwb_msgs::uwb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb_msgs::uwb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uwb_msgs::uwb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uwb_msgs::uwb_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb_msgs::uwb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb_msgs::uwb_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uwb_msgs::uwb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddc35d181e42e0b27867e8ec3bbe2456";
  }

  static const char* value(const ::uwb_msgs::uwb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddc35d181e42e0b2ULL;
  static const uint64_t static_value2 = 0x7867e8ec3bbe2456ULL;
};

template<class ContainerAllocator>
struct DataType< ::uwb_msgs::uwb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uwb_msgs/uwb";
  }

  static const char* value(const ::uwb_msgs::uwb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uwb_msgs::uwb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"nlink_parser/LinktrackNodeframe2 uwb\n"
"uint8 role\n"
"uint8 id\n"
"float32 dis\n"
"float32 fp_rssi\n"
"float32 rx_rssi\n"
"float32 dis_avg\n"
"float32 fp_avg\n"
"float32 rx_avg\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nlink_parser/LinktrackNodeframe2\n"
"uint8 role\n"
"uint8 id\n"
"uint32 local_time\n"
"uint32 system_time\n"
"float32 voltage\n"
"float32[3] pos_3d\n"
"float32[3] eop_3d\n"
"float32[3] vel_3d\n"
"float32[3] angle_3d\n"
"float32[4] quaternion\n"
"float32[3] imu_gyro_3d\n"
"float32[3] imu_acc_3d\n"
"LinktrackNode2[] nodes\n"
"\n"
"================================================================================\n"
"MSG: nlink_parser/LinktrackNode2\n"
"uint8 role\n"
"uint8 id\n"
"float32 dis\n"
"float32 fp_rssi\n"
"float32 rx_rssi\n"
;
  }

  static const char* value(const ::uwb_msgs::uwb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uwb_msgs::uwb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uwb);
      stream.next(m.role);
      stream.next(m.id);
      stream.next(m.dis);
      stream.next(m.fp_rssi);
      stream.next(m.rx_rssi);
      stream.next(m.dis_avg);
      stream.next(m.fp_avg);
      stream.next(m.rx_avg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uwb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uwb_msgs::uwb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uwb_msgs::uwb_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "uwb: ";
    s << std::endl;
    Printer< ::nlink_parser::LinktrackNodeframe2_<ContainerAllocator> >::stream(s, indent + "  ", v.uwb);
    s << indent << "role: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.role);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "dis: ";
    Printer<float>::stream(s, indent + "  ", v.dis);
    s << indent << "fp_rssi: ";
    Printer<float>::stream(s, indent + "  ", v.fp_rssi);
    s << indent << "rx_rssi: ";
    Printer<float>::stream(s, indent + "  ", v.rx_rssi);
    s << indent << "dis_avg: ";
    Printer<float>::stream(s, indent + "  ", v.dis_avg);
    s << indent << "fp_avg: ";
    Printer<float>::stream(s, indent + "  ", v.fp_avg);
    s << indent << "rx_avg: ";
    Printer<float>::stream(s, indent + "  ", v.rx_avg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UWB_MSGS_MESSAGE_UWB_H
