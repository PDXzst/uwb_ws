# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uwb_msgs/uwb.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nlink_parser.msg
import std_msgs.msg

class uwb(genpy.Message):
  _md5sum = "ddc35d181e42e0b27867e8ec3bbe2456"
  _type = "uwb_msgs/uwb"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
nlink_parser/LinktrackNodeframe2 uwb
uint8 role
uint8 id
float32 dis
float32 fp_rssi
float32 rx_rssi
float32 dis_avg
float32 fp_avg
float32 rx_avg
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nlink_parser/LinktrackNodeframe2
uint8 role
uint8 id
uint32 local_time
uint32 system_time
float32 voltage
float32[3] pos_3d
float32[3] eop_3d
float32[3] vel_3d
float32[3] angle_3d
float32[4] quaternion
float32[3] imu_gyro_3d
float32[3] imu_acc_3d
LinktrackNode2[] nodes

================================================================================
MSG: nlink_parser/LinktrackNode2
uint8 role
uint8 id
float32 dis
float32 fp_rssi
float32 rx_rssi
"""
  __slots__ = ['header','uwb','role','id','dis','fp_rssi','rx_rssi','dis_avg','fp_avg','rx_avg']
  _slot_types = ['std_msgs/Header','nlink_parser/LinktrackNodeframe2','uint8','uint8','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,uwb,role,id,dis,fp_rssi,rx_rssi,dis_avg,fp_avg,rx_avg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(uwb, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.uwb is None:
        self.uwb = nlink_parser.msg.LinktrackNodeframe2()
      if self.role is None:
        self.role = 0
      if self.id is None:
        self.id = 0
      if self.dis is None:
        self.dis = 0.
      if self.fp_rssi is None:
        self.fp_rssi = 0.
      if self.rx_rssi is None:
        self.rx_rssi = 0.
      if self.dis_avg is None:
        self.dis_avg = 0.
      if self.fp_avg is None:
        self.fp_avg = 0.
      if self.rx_avg is None:
        self.rx_avg = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.uwb = nlink_parser.msg.LinktrackNodeframe2()
      self.role = 0
      self.id = 0
      self.dis = 0.
      self.fp_rssi = 0.
      self.rx_rssi = 0.
      self.dis_avg = 0.
      self.fp_avg = 0.
      self.rx_avg = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2If().pack(_x.uwb.role, _x.uwb.id, _x.uwb.local_time, _x.uwb.system_time, _x.uwb.voltage))
      buff.write(_get_struct_3f().pack(*self.uwb.pos_3d))
      buff.write(_get_struct_3f().pack(*self.uwb.eop_3d))
      buff.write(_get_struct_3f().pack(*self.uwb.vel_3d))
      buff.write(_get_struct_3f().pack(*self.uwb.angle_3d))
      buff.write(_get_struct_4f().pack(*self.uwb.quaternion))
      buff.write(_get_struct_3f().pack(*self.uwb.imu_gyro_3d))
      buff.write(_get_struct_3f().pack(*self.uwb.imu_acc_3d))
      length = len(self.uwb.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.uwb.nodes:
        _x = val1
        buff.write(_get_struct_2B3f().pack(_x.role, _x.id, _x.dis, _x.fp_rssi, _x.rx_rssi))
      _x = self
      buff.write(_get_struct_2B6f().pack(_x.role, _x.id, _x.dis, _x.fp_rssi, _x.rx_rssi, _x.dis_avg, _x.fp_avg, _x.rx_avg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.uwb is None:
        self.uwb = nlink_parser.msg.LinktrackNodeframe2()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.uwb.role, _x.uwb.id, _x.uwb.local_time, _x.uwb.system_time, _x.uwb.voltage,) = _get_struct_2B2If().unpack(str[start:end])
      start = end
      end += 12
      self.uwb.pos_3d = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.uwb.eop_3d = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.uwb.vel_3d = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.uwb.angle_3d = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.uwb.quaternion = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.uwb.imu_gyro_3d = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.uwb.imu_acc_3d = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uwb.nodes = []
      for i in range(0, length):
        val1 = nlink_parser.msg.LinktrackNode2()
        _x = val1
        start = end
        end += 14
        (_x.role, _x.id, _x.dis, _x.fp_rssi, _x.rx_rssi,) = _get_struct_2B3f().unpack(str[start:end])
        self.uwb.nodes.append(val1)
      _x = self
      start = end
      end += 26
      (_x.role, _x.id, _x.dis, _x.fp_rssi, _x.rx_rssi, _x.dis_avg, _x.fp_avg, _x.rx_avg,) = _get_struct_2B6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2If().pack(_x.uwb.role, _x.uwb.id, _x.uwb.local_time, _x.uwb.system_time, _x.uwb.voltage))
      buff.write(self.uwb.pos_3d.tostring())
      buff.write(self.uwb.eop_3d.tostring())
      buff.write(self.uwb.vel_3d.tostring())
      buff.write(self.uwb.angle_3d.tostring())
      buff.write(self.uwb.quaternion.tostring())
      buff.write(self.uwb.imu_gyro_3d.tostring())
      buff.write(self.uwb.imu_acc_3d.tostring())
      length = len(self.uwb.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.uwb.nodes:
        _x = val1
        buff.write(_get_struct_2B3f().pack(_x.role, _x.id, _x.dis, _x.fp_rssi, _x.rx_rssi))
      _x = self
      buff.write(_get_struct_2B6f().pack(_x.role, _x.id, _x.dis, _x.fp_rssi, _x.rx_rssi, _x.dis_avg, _x.fp_avg, _x.rx_avg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.uwb is None:
        self.uwb = nlink_parser.msg.LinktrackNodeframe2()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.uwb.role, _x.uwb.id, _x.uwb.local_time, _x.uwb.system_time, _x.uwb.voltage,) = _get_struct_2B2If().unpack(str[start:end])
      start = end
      end += 12
      self.uwb.pos_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.uwb.eop_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.uwb.vel_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.uwb.angle_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.uwb.quaternion = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.uwb.imu_gyro_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.uwb.imu_acc_3d = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uwb.nodes = []
      for i in range(0, length):
        val1 = nlink_parser.msg.LinktrackNode2()
        _x = val1
        start = end
        end += 14
        (_x.role, _x.id, _x.dis, _x.fp_rssi, _x.rx_rssi,) = _get_struct_2B3f().unpack(str[start:end])
        self.uwb.nodes.append(val1)
      _x = self
      start = end
      end += 26
      (_x.role, _x.id, _x.dis, _x.fp_rssi, _x.rx_rssi, _x.dis_avg, _x.fp_avg, _x.rx_avg,) = _get_struct_2B6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2If = None
def _get_struct_2B2If():
    global _struct_2B2If
    if _struct_2B2If is None:
        _struct_2B2If = struct.Struct("<2B2If")
    return _struct_2B2If
_struct_2B3f = None
def _get_struct_2B3f():
    global _struct_2B3f
    if _struct_2B3f is None:
        _struct_2B3f = struct.Struct("<2B3f")
    return _struct_2B3f
_struct_2B6f = None
def _get_struct_2B6f():
    global _struct_2B6f
    if _struct_2B6f is None:
        _struct_2B6f = struct.Struct("<2B6f")
    return _struct_2B6f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
