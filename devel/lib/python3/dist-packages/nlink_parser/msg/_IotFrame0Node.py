# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nlink_parser/IotFrame0Node.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IotFrame0Node(genpy.Message):
  _md5sum = "df423b5fa843bedeae14cfe493476452"
  _type = "nlink_parser/IotFrame0Node"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 uid
float32 dis
float32 aoa_angle_horizontal
float32 aoa_angle_vertical
float32 fp_rssi
float32 rx_rssi
string user_data
"""
  __slots__ = ['uid','dis','aoa_angle_horizontal','aoa_angle_vertical','fp_rssi','rx_rssi','user_data']
  _slot_types = ['uint32','float32','float32','float32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       uid,dis,aoa_angle_horizontal,aoa_angle_vertical,fp_rssi,rx_rssi,user_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IotFrame0Node, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.uid is None:
        self.uid = 0
      if self.dis is None:
        self.dis = 0.
      if self.aoa_angle_horizontal is None:
        self.aoa_angle_horizontal = 0.
      if self.aoa_angle_vertical is None:
        self.aoa_angle_vertical = 0.
      if self.fp_rssi is None:
        self.fp_rssi = 0.
      if self.rx_rssi is None:
        self.rx_rssi = 0.
      if self.user_data is None:
        self.user_data = ''
    else:
      self.uid = 0
      self.dis = 0.
      self.aoa_angle_horizontal = 0.
      self.aoa_angle_vertical = 0.
      self.fp_rssi = 0.
      self.rx_rssi = 0.
      self.user_data = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I5f().pack(_x.uid, _x.dis, _x.aoa_angle_horizontal, _x.aoa_angle_vertical, _x.fp_rssi, _x.rx_rssi))
      _x = self.user_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.uid, _x.dis, _x.aoa_angle_horizontal, _x.aoa_angle_vertical, _x.fp_rssi, _x.rx_rssi,) = _get_struct_I5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I5f().pack(_x.uid, _x.dis, _x.aoa_angle_horizontal, _x.aoa_angle_vertical, _x.fp_rssi, _x.rx_rssi))
      _x = self.user_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.uid, _x.dis, _x.aoa_angle_horizontal, _x.aoa_angle_vertical, _x.fp_rssi, _x.rx_rssi,) = _get_struct_I5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I5f = None
def _get_struct_I5f():
    global _struct_I5f
    if _struct_I5f is None:
        _struct_I5f = struct.Struct("<I5f")
    return _struct_I5f
