# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nlink_parser/LinktrackNodeframe4.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nlink_parser.msg

class LinktrackNodeframe4(genpy.Message):
  _md5sum = "f3127a55ee0f30a49a0427a969f1b3ee"
  _type = "nlink_parser/LinktrackNodeframe4"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 role
uint8 id
uint32 local_time
uint32 system_time
float32 voltage
LinktrackNode4Tag[] tags

================================================================================
MSG: nlink_parser/LinktrackNode4Tag
uint8 id
float32 voltage
LinktrackNode4Anchor[] anchors

================================================================================
MSG: nlink_parser/LinktrackNode4Anchor
uint8 id
float32 dis
"""
  __slots__ = ['role','id','local_time','system_time','voltage','tags']
  _slot_types = ['uint8','uint8','uint32','uint32','float32','nlink_parser/LinktrackNode4Tag[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       role,id,local_time,system_time,voltage,tags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LinktrackNodeframe4, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.role is None:
        self.role = 0
      if self.id is None:
        self.id = 0
      if self.local_time is None:
        self.local_time = 0
      if self.system_time is None:
        self.system_time = 0
      if self.voltage is None:
        self.voltage = 0.
      if self.tags is None:
        self.tags = []
    else:
      self.role = 0
      self.id = 0
      self.local_time = 0
      self.system_time = 0
      self.voltage = 0.
      self.tags = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B2If().pack(_x.role, _x.id, _x.local_time, _x.system_time, _x.voltage))
      length = len(self.tags)
      buff.write(_struct_I.pack(length))
      for val1 in self.tags:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.id, _x.voltage))
        length = len(val1.anchors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.anchors:
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.id, _x.dis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tags is None:
        self.tags = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.role, _x.id, _x.local_time, _x.system_time, _x.voltage,) = _get_struct_2B2If().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tags = []
      for i in range(0, length):
        val1 = nlink_parser.msg.LinktrackNode4Tag()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.voltage,) = _get_struct_Bf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.anchors = []
        for i in range(0, length):
          val2 = nlink_parser.msg.LinktrackNode4Anchor()
          _x = val2
          start = end
          end += 5
          (_x.id, _x.dis,) = _get_struct_Bf().unpack(str[start:end])
          val1.anchors.append(val2)
        self.tags.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B2If().pack(_x.role, _x.id, _x.local_time, _x.system_time, _x.voltage))
      length = len(self.tags)
      buff.write(_struct_I.pack(length))
      for val1 in self.tags:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.id, _x.voltage))
        length = len(val1.anchors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.anchors:
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.id, _x.dis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tags is None:
        self.tags = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.role, _x.id, _x.local_time, _x.system_time, _x.voltage,) = _get_struct_2B2If().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tags = []
      for i in range(0, length):
        val1 = nlink_parser.msg.LinktrackNode4Tag()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.voltage,) = _get_struct_Bf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.anchors = []
        for i in range(0, length):
          val2 = nlink_parser.msg.LinktrackNode4Anchor()
          _x = val2
          start = end
          end += 5
          (_x.id, _x.dis,) = _get_struct_Bf().unpack(str[start:end])
          val1.anchors.append(val2)
        self.tags.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2If = None
def _get_struct_2B2If():
    global _struct_2B2If
    if _struct_2B2If is None:
        _struct_2B2If = struct.Struct("<2B2If")
    return _struct_2B2If
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
